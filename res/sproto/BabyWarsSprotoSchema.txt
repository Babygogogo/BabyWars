
.ActionGeneric {
    ActionGetSkillConfiguration         1 : ActionGetSkillConfiguration
    ActionGetJoinableWarConfigurations  2 : ActionGetJoinableWarConfigurations
    ActionJoinWar                       3 : ActionJoinWar
    ActionLogin                         4 : ActionLogin
    ActionLogout                        5 : ActionLogout
    ActionMessage                       6 : ActionMessage
    ActionNewWar                        7 : ActionNewWar
    ActionNetworkHeartbeat              8 : ActionNetworkHeartbeat
    ActionRegister                      9 : ActionRegister
    ActionSetSkillConfiguration        10 : ActionSetSkillConfiguration
}

.ActionRedis {
    actionCode           0 : integer
    encodedActionGeneric 1 : string
}

.ActionGetJoinableWarConfigurations {
    actionCode        0 : integer
    playerAccount     1 : string
    playerPassword    2 : string
    sceneWarShortName 3 : string
    warConfigurations 4 : *WarConfiguration(sceneWarFileName)
}

.ActionGetSkillConfiguration {
    actionCode           0 : integer
    playerAccount        1 : string
    playerPassword       2 : string
    skillConfigurationID 3 : integer
    skillConfiguration   4 : SingleSkillConfiguration
}

.ActionJoinWar {
    actionCode           0 : integer
    playerAccount        1 : string
    playerPassword       2 : string
    sceneWarFileName     3 : string
    playerIndex          4 : integer
    skillConfigurationID 5 : integer
    warPassword          6 : string
    isWarStarted         7 : boolean
}

.ActionLogin {
    actionCode    0 : integer
    clientVersion 1 : string
    loginAccount  2 : string
    loginPassword 3 : string
}

.ActionLogout {
    actionCode    0 :  integer
    messageCode   1 :  integer
    messageParams 2 : *string
}

.ActionMessage {
    actionCode    0 :  integer
    messageCode   1 :  integer
    messageParams 2 : *string
}

.ActionNewWar {
    actionCode            0 : integer
    playerAccount         1 : string
    playerPassword        2 : string
    sceneWarFileName      3 : string
    warPassword           4 : string
    warFieldFileName      5 : string
    playerIndex           6 : integer
    skillConfigurationID  7 : integer
    maxBaseSkillPoints    8 : integer
    isFogOfWarByDefault   9 : boolean
    defaultWeatherCode   10 : integer
}

.ActionNetworkHeartbeat {
    actionCode       0 : integer
    heartbeatCounter 1 : integer
}

.ActionRegister {
    actionCode       0 : integer
    clientVersion    1 : string
    registerAccount  2 : string
    registerPassword 3 : string
}

.ActionSetSkillConfiguration {
    actionCode           0 : integer
    playerAccount        1 : string
    playerPassword       2 : string
    skillConfigurationID 3 : integer
    skillConfiguration   4 : SingleSkillConfiguration
}

.PlayerInfo {
    playerIndex 0 : integer
    account     1 : string
    nickname    2 : string
}

.WarConfiguration {
    sceneWarFileName    0 :  string
    warFieldFileName    1 :  string
    warPassword         2 :  string
    maxBaseSkillPoints  3 :  integer
    isFogOfWarByDefault 4 :  boolean
    defaultWeatherCode  5 :  integer
    isRandomWarField    6 :  boolean
    players             7 : *PlayerInfo(playerIndex)
}

.Action {
    actionCode      0 : integer
    playerAccount   1 : string
    playerPassword  2 : string

    heartbeatCounter          100 :  integer
    clientVersion             101 :  string
    registerAccount           102 :  string
    registerPassword          103 :  string
    loginAccount              104 :  string
    loginPassword             105 :  string
    messageCode               106 :  integer
    messageParams             107 : *string
    skillConfigurationID      108 :  integer
    skillConfiguration        109 :  SingleSkillConfiguration
    sceneWarFileName          110 :  string
    sceneWarShortName         111 :  string
    warConfiguration          112 :  WarConfiguration
    joinableWarConfigurations 113 : *WarConfiguration(sceneWarFileName)
}

.SingleSkillConfiguration {
    .SingleSkill {
        id    0 : integer
        level 1 : integer
    }

    .ActiveSkillGroup {
        energyRequirement 0 :  integer
        skills            1 : *SingleSkill
    }

    basePoints             0 :  integer
    activatingSkillGroupID 1 :  integer
    passive                2 : *SingleSkill
    active1                3 :  ActiveSkillGroup
    active2                4 :  ActiveSkillGroup
}

.AccountAndPassword {
    account  1 : string
    password 2 : string
}

.PlayerProfile {
    .SingleGameRecord {
        rankScore 0 : integer
        win       1 : integer
        lose      2 : integer
        draw      3 : integer
    }

    .WarLists {
        .SingleWarItem {
            sceneWarFileName 0 : string
        }

        ongoing 0 : *SingleWarItem(sceneWarFileName)
        created 1 : *SingleWarItem(sceneWarFileName)
    }

    account             0 :  string
    password            1 :  string
    nickname            2 :  string
    gameRecords         3 : *SingleGameRecord
    skillConfigurations 4 : *SingleSkillConfiguration
    warLists            5 :  WarLists
}

.SceneWar {
    .SinglePlayerData {
        playerIndex         0 : integer
        account             1 : string
        nickname            2 : string
        fund                3 : integer
        isAlive             4 : boolean
        damageCost          5 : integer
        skillActivatedCount 6 : integer
        skillConfiguration  7 : SingleSkillConfiguration
    }

    .TurnData {
        turnIndex     0 : integer
        playerIndex   1 : integer
        turnPhaseCode 2 : integer
    }

    .SingleFogMapForPaths {
        playerIndex           0 : integer
        encodedFogMapForPaths 1 : string
    }

    .FogMapData {
        forcingFogCode                   0 :  integer
        expiringPlayerIndexForForcingFog 1 :  integer
        expiringTurnIndexForForcingFog   2 :  integer
        mapsForPaths                     3 : *SingleFogMapForPaths(playerIndex)
    }

    .AttackDoer {
        .PrimaryWeaponCurrentAmmo {
            currentAmmo 0 : integer
        }

        primaryWeapon 0 : PrimaryWeaponCurrentAmmo
    }

    .AttackTaker {
        currentHP 0 : integer
    }

    .Buildable {
        currentBuildPoint 0 : integer
    }

    .Capturable {
        currentCapturePoint 0 : integer
    }

    .Capturer {
        isCapturing 0 : boolean
    }

    .Diver {
        isDiving 0 : boolean
    }

    .FlareLauncher {
        currentAmmo 0 : integer
    }

    .FuelOwner {
        current 0 : integer
    }

    .GridIndexable {
        x 0 : integer
        y 1 : integer
    }

    .MaterialOwner {
        current 0 : integer
    }

    .Promotable {
        current 0 : integer
    }

    .TileBuilder {
        isBuildingModelTile 0 : boolean
    }

    .UnitLoader {
        loaded 0 : *integer
    }

    .TileData {
        positionIndex 0 : integer
        baseID        1 : integer
        objectID      2 : integer
        AttackTaker   3 : AttackTaker
        Buildable     4 : Buildable
        Capturable    5 : Capturable
        GridIndexable 6 : GridIndexable
    }

    .TileMapData {
        tiles 0 : *TileData(positionIndex)
    }

    .UnitData {
        unitID         0 : integer
        tiledID        1 : integer
        stateCode      2 : integer
        AttackDoer     3 : AttackDoer
        AttackTaker    4 : AttackTaker
        Capturer       5 : Capturer
        Diver          6 : Diver
        FlareLauncher  7 : FlareLauncher
        FuelOwner      8 : FuelOwner
        GridIndexable  9 : GridIndexable
        MaterialOwner 10 : MaterialOwner
        Promotable    11 : Promotable
        TileBuilder   12 : TileBuilder
        UnitLoader    13 : UnitLoader
    }

    .UnitMapData {
        availableUnitID 0 :  integer
        unitsOnMap      1 : *UnitData(unitID)
        unitsLoaded     2 : *UnitData(unitID)
    }

    .WarFieldData {
        warFieldFileName 0 : string
        fogMap           1 : FogMapData
        tileMap          2 : TileMapData
        unitMap          3 : UnitMapData
    }

    .WeatherData {
        currentWeatherCode            0 : integer
        defaultWeatherCode            1 : integer
        expiringPlayerIndexForWeather 2 : integer
        expiringTurnIndexForWeather   3 : integer
    }

    sceneWarFileName     0 :  string
    actionID             1 :  integer
    maxBaseSkillPoints   2 :  integer
    isWarEnded           3 :  boolean
    isRandomWarField     4 :  boolean
    isFogOfWarByDefault  5 :  boolean
    isTotalReplay        6 :  boolean
    warPassword          7 :  string
    executedActions      8 : *Action
    players              9 : *SinglePlayerData(playerIndex)
    turn                10 :  TurnData
    warField            11 :  WarFieldData
    weather             12 :  WeatherData
}
